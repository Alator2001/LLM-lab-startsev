"""
Telegram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–¥–∞—á–∏, —Ö—Ä–∞–Ω–∏—Ç –∏—Ö –≤ JSON, –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ,
–æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
"""

import logging
import json
import os
import threading
import asyncio
import httpx
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–¥–∞—á–∞–º–∏
TASKS_FILE = 'tasks.json'
# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
PRIORITIES = ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']
# –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
PRIORITY_EMOJIS = {
    '–Ω–∏–∑–∫–∏–π': 'üü¢',
    '—Å—Ä–µ–¥–Ω–∏–π': 'üü°',
    '–≤—ã—Å–æ–∫–∏–π': 'üî¥'
}

# URL –¥–ª—è API CoinGecko
COINGECKO_API_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,tether&vs_currencies=usd'

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
CRYPTO_NAMES = {
    'bitcoin': 'Bitcoin (BTC)',
    'ethereum': 'Ethereum (ETH)',
    'tether': 'Tether (USDT)'
}


class TaskManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å JSON —Ñ–∞–π–ª–æ–º."""
    
    def __init__(self, filename: str = TASKS_FILE):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        self.filename = filename
        self.tasks = self.load_tasks()
    
    def load_tasks(self) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        """
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    tasks = json.load(f)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                    return tasks
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {e}")
            return []
    
    def save_tasks(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ JSON —Ñ–∞–π–ª."""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.tasks, f, ensure_ascii=False, indent=2)
            logger.info(f"–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(self.tasks)} –∑–∞–¥–∞—á")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
    
    def add_task(self, text: str, user_id: int, priority: str = '—Å—Ä–µ–¥–Ω–∏–π', 
                 scheduled_date: Optional[str] = None, scheduled_time: Optional[str] = None) -> int:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
        
        Args:
            text: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)
            scheduled_date: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            scheduled_time: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        
        Returns:
            ID –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        """
        task_id = len(self.tasks) + 1
        task = {
            'id': task_id,
            'text': text,
            'user_id': user_id,
            'priority': priority,
            'completed': False,
            'created_at': datetime.now().isoformat(),
            'completed_at': None,
            'scheduled_date': scheduled_date,
            'scheduled_time': scheduled_time
        }
        self.tasks.append(task)
        self.save_tasks()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        return task_id
    
    def get_user_tasks(self, user_id: int, completed: Optional[bool] = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            completed: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (None - –≤—Å–µ –∑–∞–¥–∞—á–∏)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if completed is None:
            return [task for task in self.tasks if task['user_id'] == user_id]
        return [task for task in self.tasks 
                if task['user_id'] == user_id and task['completed'] == completed]
    
    def mark_task_done(self, user_id: int, task_id: int) -> bool:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            task_id: ID –∑–∞–¥–∞—á–∏
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–º–µ—á–µ–Ω–∞, False –∏–Ω–∞—á–µ
        """
        for task in self.tasks:
            if task['id'] == task_id and task['user_id'] == user_id:
                task['completed'] = True
                task['completed_at'] = datetime.now().isoformat()
                self.save_tasks()
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return True
        return False
    
    def get_today_tasks(self, user_id: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        """
        today = datetime.now().date()
        today_tasks = []
        for task in self.tasks:
            if task['user_id'] == user_id and task['completed'] == False:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
                created_date = datetime.fromisoformat(task['created_at']).date()
                if created_date == today:
                    today_tasks.append(task)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                elif task.get('scheduled_date'):
                    try:
                        scheduled_date = datetime.strptime(task['scheduled_date'], '%d.%m.%Y').date()
                        if scheduled_date == today:
                            today_tasks.append(task)
                    except ValueError:
                        continue
        return today_tasks
    
    def get_scheduled_tasks(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º).
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        scheduled_tasks = []
        for task in self.tasks:
            if not task['completed'] and task.get('scheduled_date') and task.get('scheduled_time'):
                scheduled_tasks.append(task)
        return scheduled_tasks
    
    def get_reminders(self, user_id: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        return self.get_user_tasks(user_id, completed=False)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
task_manager = TaskManager()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Application –∏ event loop
app_instance = None
main_loop = None


def format_task(task: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    
    Args:
        task: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–¥–∞—á–µ–π
    """
    status = "‚úÖ" if task['completed'] else "‚è≥"
    priority_emoji = PRIORITY_EMOJIS.get(task['priority'], '‚ö™')
    created = datetime.fromisoformat(task['created_at']).strftime('%d.%m.%Y %H:%M')
    
    result = f"{status} {priority_emoji} [{task['priority']}] #{task['id']}: {task['text']}\n"
    result += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {created}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    if task.get('scheduled_date'):
        result += f"\n   üìÜ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {task['scheduled_date']}"
        if task.get('scheduled_time'):
            result += f" –≤ {task['scheduled_time']}"
    
    if task['completed'] and task['completed_at']:
        completed = datetime.fromisoformat(task['completed_at']).strftime('%d.%m.%Y %H:%M')
        result += f"\n   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞: {completed}"
    
    return result


async def get_crypto_prices() -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API CoinGecko.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫—É—Ä—Å–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(COINGECKO_API_URL)
            if response.status_code == 200:
                data = response.json()
                logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
                return data
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API CoinGecko: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return None
    except httpx.TimeoutException:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API CoinGecko")
        return None
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API CoinGecko: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.
    """
    welcome_message = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

üìã –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üí∞

üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add <–∑–∞–¥–∞—á–∞> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/schedule <–∑–∞–¥–∞—á–∞> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
/today - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
/completed - –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/done <ID> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
/crypto - –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /add <–≤–∞—à–∞ –∑–∞–¥–∞—á–∞>!
    """
    await update.message.reply_text(welcome_message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    """
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/add <–∑–∞–¥–∞—á–∞> <–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç>
   –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
   –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –Ω–∏–∑–∫–∏–π
   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π
   –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å—Ä–µ–¥–Ω–∏–π

/schedule <–∑–∞–¥–∞—á–∞> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> <–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç>
   –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
   –ü—Ä–∏–º–µ—Ä: /schedule –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 20.01.2024 15:00 –≤—ã—Å–æ–∫–∏–π
   –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: DD.MM.YYYY
   –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: HH:MM
   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å—Ä–µ–¥–Ω–∏–π

/today
   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

/list
   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ) –∑–∞–¥–∞—á–∏

/completed
   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

/done <ID>
   –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
   –ü—Ä–∏–º–µ—Ä: /done 5

/crypto
   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (Bitcoin, Ethereum, Tether)

/help
   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —á–∞—Ç,
–∏ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!
    """
    await update.message.reply_text(help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")


async def crypto_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —Ç–æ–ø-3 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    user_id = update.effective_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    crypto_data = await get_crypto_prices()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if crypto_data is None:
        await loading_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
            "‚Ä¢ API CoinGecko –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏
    message = "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    for crypto_id, crypto_name in CRYPTO_NAMES.items():
        if crypto_id in crypto_data and 'usd' in crypto_data[crypto_id]:
            price = crypto_data[crypto_id]['usd']
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            if price >= 1:
                formatted_price = f"{price:,.2f}".replace(',', ' ')
            else:
                formatted_price = f"{price:.4f}"
            message += f"{crypto_name}: {formatted_price} USD\n"
        else:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {crypto_id}")
            message += f"{crypto_name}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    
    message += "\nüìä –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã CoinGecko"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏
    await loading_message.edit_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")


async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add.
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É!\n"
            "–ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –Ω–∏–∑–∫–∏–π"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = ' '.join(context.args)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –∫–æ–Ω—Ü–µ
    priority = '—Å—Ä–µ–¥–Ω–∏–π'
    words = args.split()
    
    if len(words) > 1 and words[-1].lower() in PRIORITIES:
        priority = words[-1].lower()
        task_text = ' '.join(words[:-1])
    else:
        task_text = args
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    task_id = task_manager.add_task(task_text, user_id, priority)
    
    priority_emoji = PRIORITY_EMOJIS.get(priority, '‚ö™')
    response = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n{priority_emoji} [{priority}] #{task_id}: {task_text}"
    
    await update.message.reply_text(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É #{task_id}")


async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    user_id = update.effective_user.id
    today_tasks = task_manager.get_today_tasks(user_id)
    
    if not today_tasks:
        await update.message.reply_text("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
        return
    
    message = "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for task in today_tasks:
        message += f"{format_task(task)}\n\n"
    
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")


async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    """
    user_id = update.effective_user.id
    active_tasks = task_manager.get_user_tasks(user_id, completed=False)
    
    if not active_tasks:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    
    message = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for task in active_tasks:
        message += f"{format_task(task)}\n\n"
    
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")


async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule.
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or len(context.args) < 3:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è!\n\n"
            "–ü—Ä–∏–º–µ—Ä: /schedule –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 20.01.2024 15:00 –≤—ã—Å–æ–∫–∏–π\n\n"
            "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: DD.MM.YYYY\n"
            "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: HH:MM"
        )
        return
    
    args = ' '.join(context.args)
    words = args.split()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    priority = '—Å—Ä–µ–¥–Ω–∏–π'
    if len(words) >= 3 and words[-1].lower() in PRIORITIES:
        priority = words[-1].lower()
        args_to_parse = ' '.join(words[:-1])
    else:
        args_to_parse = args
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    parts = args_to_parse.rsplit(' ', 2)
    
    if len(parts) < 3:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/schedule <–∑–∞–¥–∞—á–∞> <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è>\n"
            "–ü—Ä–∏–º–µ—Ä: /schedule –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 20.01.2024 15:00"
        )
        return
    
    task_text = parts[0]
    scheduled_date = parts[1]
    scheduled_time = parts[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        datetime.strptime(scheduled_date, '%d.%m.%Y')
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY\n"
            "–ü—Ä–∏–º–µ—Ä: 20.01.2024"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(scheduled_time, '%H:%M')
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM\n"
            "–ü—Ä–∏–º–µ—Ä: 15:00"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    task_id = task_manager.add_task(task_text, user_id, priority, scheduled_date, scheduled_time)
    
    priority_emoji = PRIORITY_EMOJIS.get(priority, '‚ö™')
    response = f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
    response += f"{priority_emoji} [{priority}] #{task_id}: {task_text}\n"
    response += f"üìÜ –î–∞—Ç–∞: {scheduled_date} –≤ {scheduled_time}"
    
    await update.message.reply_text(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É #{task_id} –Ω–∞ {scheduled_date} {scheduled_time}")


async def send_reminders_sync():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ context –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ.
    """
    if not app_instance:
        return
        
    now = datetime.now()
    scheduled_tasks = task_manager.get_scheduled_tasks()
    
    for task in scheduled_tasks:
        if task.get('scheduled_date') and task.get('scheduled_time'):
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
                task_date = datetime.strptime(task['scheduled_date'], '%d.%m.%Y').date()
                task_time = datetime.strptime(task['scheduled_time'], '%H:%M').time()
                task_datetime = datetime.combine(task_date, task_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
                if now >= task_datetime:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    priority_emoji = PRIORITY_EMOJIS.get(task['priority'], '‚ö™')
                    message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n"
                    message += f"{priority_emoji} [{task['priority']}] #{task['id']}: {task['text']}\n"
                    message += f"üìÜ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {task['scheduled_date']} –≤ {task['scheduled_time']}"
                    
                    await app_instance.bot.send_message(
                        chat_id=task['user_id'],
                        text=message
                    )
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ #{task['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task['user_id']}")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    # (–∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π, –Ω–æ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
                    task['scheduled_date'] = None
                    task['scheduled_time'] = None
                    task_manager.save_tasks()
                    
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏ #{task['id']}: {e}")
                continue


async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    if not app_instance:
        return
        
    now = datetime.now()
    scheduled_tasks = task_manager.get_scheduled_tasks()
    
    for task in scheduled_tasks:
        if task.get('scheduled_date') and task.get('scheduled_time'):
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
                task_date = datetime.strptime(task['scheduled_date'], '%d.%m.%Y').date()
                task_time = datetime.strptime(task['scheduled_time'], '%H:%M').time()
                task_datetime = datetime.combine(task_date, task_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
                if now >= task_datetime:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    priority_emoji = PRIORITY_EMOJIS.get(task['priority'], '‚ö™')
                    message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!\n\n"
                    message += f"{priority_emoji} [{task['priority']}] #{task['id']}: {task['text']}\n"
                    message += f"üìÜ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {task['scheduled_date']} –≤ {task['scheduled_time']}"
                    
                    await app_instance.bot.send_message(
                        chat_id=task['user_id'],
                        text=message
                    )
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ #{task['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task['user_id']}")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    # (–∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π, –Ω–æ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
                    task['scheduled_date'] = None
                    task['scheduled_time'] = None
                    task_manager.save_tasks()
                    
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏ #{task['id']}: {e}")
                continue


def check_reminders_periodically():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º threading.Timer.
    """
    def run_check():
        try:
            if app_instance and main_loop:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop —á–µ—Ä–µ–∑ run_coroutine_threadsafe
                future = asyncio.run_coroutine_threadsafe(send_reminders_sync(), main_loop)
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                try:
                    future.result(timeout=10)
                    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        finally:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
            timer = threading.Timer(60.0, run_check)
            timer.daemon = True
            timer.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    timer = threading.Timer(10.0, run_check)
    timer.daemon = True
    timer.start()
    logger.info("–ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


async def completed_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /completed.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    """
    user_id = update.effective_user.id
    completed_tasks = task_manager.get_user_tasks(user_id, completed=True)
    
    if not completed_tasks:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    
    message = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for task in completed_tasks:
        message += f"{format_task(task)}\n\n"
    
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")


async def done_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done.
    –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å ID –∑–∞–¥–∞—á–∏
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏!\n"
            "–ü—Ä–∏–º–µ—Ä: /done 5"
        )
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    if task_manager.mark_task_done(user_id, task_id):
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É #{task_id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
    else:
        await update.message.reply_text(
            f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
        )


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥).
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.
    """
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if text.startswith('/'):
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        return
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    response = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n"
    response += f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
    response += "üìå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n"
    response += "1Ô∏è‚É£ –ù–∏–∑–∫–∏–π\n"
    response += "2Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–π\n"
    response += "3Ô∏è‚É£ –í—ã—Å–æ–∫–∏–π\n\n"
    response += "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
    response += f"/add {text} –Ω–∏–∑–∫–∏–π"
    
    await update.message.reply_text(response)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: {update}")
    logger.error(f"Context: {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add", add_task_command))
    application.add_handler(CommandHandler("schedule", schedule_command))
    application.add_handler(CommandHandler("today", today_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("done", done_command))
    application.add_handler(CommandHandler("completed", completed_command))
    application.add_handler(CommandHandler("crypto", crypto_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ application
    global app_instance, main_loop
    
    # –ü–æ–ª—É—á–∞–µ–º event loop –¥–æ –∑–∞–ø—É—Å–∫–∞
    main_loop = asyncio.get_event_loop()
    app_instance = application
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    check_reminders_periodically()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

